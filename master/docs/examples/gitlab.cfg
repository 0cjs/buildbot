# -*- python -*-
# ex: set filetype=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

from buildbot.plugins import *
import re


# Are all your projects built the same way?
# Do you yearn for a way to do simple static configuration?
# If so, try writing a function.
# Here's an example that
# - uses GitLab
# - provides one regular builder and one smoke test builder per project
# - assumes the projects use Gnu automake etc.
#
# To use this example with your own local instance of gitlab:
#
# 0. Edit this file to replace example.com with your own domain.
#
# 1. Set up local mirrors of the gnu projects, e.g.
#   for proj in hello time
#   do 
#     git clone --mirror git@gitlab.com:GNU/$proj.git
#     cd $proj
#     git push --mirror git@gitlab.example.com:build/gnu-$proj.git
#     cd ..
#   done
#
# 2. Follow instructions below marked "CONFIGME: GitLab" to
# configure GitLab to know about this buildbot.
#
# Your buildbot should then do automated builds of merge requests
# that target forks of those local projects.

def addGitLabProject(repourl, workernames, branch=None):
    '''
    Add a builder and a merge request builder for the given branch
    of the given project, running on the given workers.
    Give each a Force button.
    Gets project name from the repourl, ignoring namespace.
    '''

    if branch is None:
        branch = "master"
    # Strip off everything before project name
    # FIXME: parse this more artfully to allow projects in folders
    name = re.sub(r'^.*/', '', repourl)
    # Strip off .git suffix, if present
    name = re.sub(r'\.git$', '', name)

    # Regular builder
    # Adjust this factory to match your site's build steps.
    # This example uses the canonical gnu configure/make steps.
    factory = util.BuildFactory()
    factory.addStep(steps.GitLab(repourl=repourl, mode='incremental'))
    factory.addStep(steps.ShellCommand(haltOnFailure=True, command=["sh", "-c", "if test -x ./bootstrap; then ./bootstrap; fi"]))
    factory.addStep(steps.ShellCommand(haltOnFailure=True, command=["./configure"]))
    factory.addStep(steps.ShellCommand(haltOnFailure=True, command=["make"]))
    factory.addStep(steps.ShellCommand(haltOnFailure=True, command=["make", "check"]))
    factory.addStep(steps.ShellCommand(haltOnFailure=True, command=["echo", "would package and upload here if this were a real project"]))

    id = name + "-" + branch
    c['schedulers'].append(schedulers.SingleBranchScheduler(
        name=id,
        change_filter=util.ChangeFilter(
            project=name, branch=branch, category="push"),
        treeStableTimer=None,
        builderNames=[id]))
    c['schedulers'].append(schedulers.ForceScheduler(
        name=id + '-force',
        builderNames=[id]))
    c['builders'].append(
        util.BuilderConfig(name=id,
                           workernames=workernames,
                           factory=factory))

    # Merge request builder (e.g. smoke test, don't fully publish artifacts;
    # for quick feedback of works-in-progress)
    # Adjust this factory to match your site's build steps.
    tryfactory = util.BuildFactory()
    tryfactory.addStep(steps.GitLab(repourl=repourl, mode='incremental'))
    tryfactory.addStep(steps.ShellCommand(haltOnFailure=True, command=["sh", "-c", "if test -x ./bootstrap; then ./bootstrap; fi"]))
    tryfactory.addStep(steps.ShellCommand(haltOnFailure=True, command=["./configure"]))
    tryfactory.addStep(steps.ShellCommand(haltOnFailure=True, command=["make"]))
    tryfactory.addStep(steps.ShellCommand(haltOnFailure=True, command=["make", "check"]))
    tryid = name + "-" + branch + "-try"
    c['schedulers'].append(schedulers.SingleBranchScheduler(
        name=tryid,
        change_filter=util.ChangeFilter(
            project=name, branch=branch, category="merge_request"),
        treeStableTimer=None,
        builderNames=[tryid]))
    c['schedulers'].append(schedulers.ForceScheduler(
        name=tryid + '-force',
        builderNames=[tryid]))
    c['builders'].append(
        util.BuilderConfig(name=tryid,
                           workernames=workernames,
                           factory=tryfactory))


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("buildbot-worker", "buildbot-pass")]
workernames = ["buildbot-worker"]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

c['change_source'] = []

####### SCHEDULERS AND BUILDERS

# The Schedulers decide how to react to incoming changes.  
c['schedulers'] = []
# The 'builders' list defines the Builders, which tell Buildbot how to
# perform a build: what steps, and which workers can execute them.
# Note that any particular build will only take place on one worker.
c['builders'] = []

# Call addGitLabProject once for each similar project you want to build.
# It adds factories, schedulers, and builders for the project
# in one fell swoop, making it easier to have a large number
# of similar projects.
addGitLabProject('git@gitlab.example.com:build/gnu-hello', workernames)
addGitLabProject('git@gitlab.example.com:build/gnu-time', workernames)

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Gnu Hello GitLab"
c['titleURL'] = "https://gitlab.example.com/build/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://buildbot.example.com:8010/"

# CONFIGME: buildbot authentication
# This example tries to show nothing to anonymous users.
# authz = util.Authz(
#   allowRules=[
#     util.AnyEndpointMatcher(role="platform"),
#     util.AnyEndpointMatcher(role="snorglepuss-does-not-exist", defaultDeny=True),
#   ],
#   roleMatchers=[
#     util.RolesFromGroups()
#   ]
# )

# minimalistic config to activate new web UI
c['www'] = dict(
    port=8010,
    # CONFIGME: GitLab application
    # Enter the URL of your buildbot gitlab hook into the GitLab UI at
    #  "User Settings / Applications / Add New Application"
    # to obtain the 2nd and 3rd parameters for GitLabAuth.
    auth=util.GitLabAuth("https://gitlab.example.com",
                         "036777777777777777777777777777777777777777777777777777777cea803a",
                         "bae69888888888888888888888888888888888888888888888888888888888ec"),
    # CONFIGME: buildbot authentication
    #authz=authz,
    change_hook_dialects=dict(
       gitlab={
           # CONFIGME: GitLab webhook
           # Create a webhook in the GitLab UI at
           #  project / Settings / Integrations / Add Webhook 
           # with a URL of e.g.
           #   http://buildbot.example.com:8010/change_hook/gitlab
           # with push and merge request triggers checked, 
           # and with a secret that matches the one here (please change):
           'secret': 'changeme',
       },
    ),
    plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

# CONFIGME: GitLab access token
# Create an access token in the GitLab UI at
#   "User Settings / Access Tokens / Add a personal access token"
# to obtain 1st and 2nd parameters for GitLabStatusPush.
gl = reporters.GitLabStatusPush('Sas23r293232ddzfHAvd', context='youchoose/this', baseURL='https://gitlab.example.com', verbose=True)
c['services'].append(gl)

c['buildbotNetUsageData'] = None

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
